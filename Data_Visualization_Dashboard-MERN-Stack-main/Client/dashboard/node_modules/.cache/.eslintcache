[{"C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\index.js":"1","C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\App.js":"2","C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\components\\Header.jsx":"3","C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\components\\Tabsrow.jsx":"4","C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\components\\AccordionForCharts.jsx":"5","C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\components\\CardsForData.jsx":"6","C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\components\\Filters.jsx":"7","C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\charts\\BarChart.jsx":"8","C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\charts\\PolarChart.jsx":"9","C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\charts\\PieChart.jsx":"10","C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\charts\\RadarChart.jsx":"11","C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\charts\\DoughnutChart.jsx":"12","C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\charts\\LineChart.jsx":"13"},{"size":279,"mtime":1721668026887,"results":"14","hashOfConfig":"15"},{"size":1064,"mtime":1721727543940,"results":"16","hashOfConfig":"15"},{"size":452,"mtime":1721668027364,"results":"17","hashOfConfig":"15"},{"size":3673,"mtime":1721727563047,"results":"18","hashOfConfig":"15"},{"size":2325,"mtime":1721668027215,"results":"19","hashOfConfig":"15"},{"size":1868,"mtime":1721668027266,"results":"20","hashOfConfig":"15"},{"size":2220,"mtime":1721727561473,"results":"21","hashOfConfig":"15"},{"size":1701,"mtime":1721668026939,"results":"22","hashOfConfig":"15"},{"size":2332,"mtime":1721668027121,"results":"23","hashOfConfig":"15"},{"size":1361,"mtime":1721668027080,"results":"24","hashOfConfig":"15"},{"size":1322,"mtime":1721668027166,"results":"25","hashOfConfig":"15"},{"size":2377,"mtime":1721668026985,"results":"26","hashOfConfig":"15"},{"size":1303,"mtime":1721668027036,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j0qtxc",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},"C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\index.js",[],[],"C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\App.js",[],[],"C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\components\\Header.jsx",[],[],"C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\components\\Tabsrow.jsx",[],[],"C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\components\\AccordionForCharts.jsx",[],[],"C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\components\\CardsForData.jsx",[],[],"C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\components\\Filters.jsx",[],[],"C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\charts\\BarChart.jsx",["73"],[],"import React from 'react'\nimport { Bar } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\n\n\nconst BarChart = ({serverData}) => {\n\n    let uniqueSectors = [];\n    \n    //using forEach because it doesn't return any array and we are adding unique sector names to an array\n    serverData.forEach((i) => {\n        if (!uniqueSectors.includes(i.sector) && i.sector !== \"\") {\n            uniqueSectors.push(i.sector);\n        }\n    })\n\n    // counting the total number of projects in each sector uniquely\n    const sectorCount = uniqueSectors.map((item) => {\n        return {\n            sector: item,\n            count: serverData.filter((i) => i.sector === item).length\n        }\n    })\n    \n\n    return (\n        <div style={{ height:'50vh'}}>\n            <Bar\n                data={{\n                    labels: uniqueSectors.map(e=>e),\n                    datasets: [\n                        {\n                            label: 'Total Projects',\n                            data: sectorCount.map(e=>e.count),\n                            borderWidth: 1,\n                        },\n                        // {\n                        //     label: 'Quantity',\n                        //     data: [7, 26, 111, 22, 11, 56]\n                        // }\n                    ]\n                }}\n                options={{\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            type: 'linear',\n                            beginAtZero: true,\n                        },\n                    }\n                }}\n                height={300}\n                \n            />\n        </div>\n    )\n}\n\nexport default BarChart","C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\charts\\PolarChart.jsx",["74","75"],[],"import React, { useEffect } from 'react'\nimport { PolarArea } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\n\n\nconst PolarChart = ({ serverData }) => {\n\n    let uniqueSectors = [];\n    //using forEach because it doesn't return any array\n    serverData.forEach((i) => {\n        if (!uniqueSectors.includes(i.sector) && i.sector !== \"\") {\n            uniqueSectors.push(i.sector);\n        }\n    })\n\n    let uniqueTopics = [];\n    serverData.forEach((i) => {\n        if (!uniqueTopics.includes(i.topic) && i.topic !== \"\") {\n            uniqueTopics.push(i.topic);\n        }\n    })\n\n    let uniqueRegion = [];\n    serverData.forEach((i) => {\n        if (!uniqueRegion.includes(i.region) && i.region !== \"\") {\n            uniqueRegion.push(i.region);\n        }\n    })\n\n    let uniqueCountry = [];\n    serverData.forEach((i) => {\n        if (!uniqueCountry.includes(i.country) && i.country !== \"\") {\n            uniqueCountry.push(i.country);\n        }\n    })\n\n    let uniqueSource = [];\n    serverData.forEach((i) => {\n        if (!uniqueSource.includes(i.source) && i.source !== \"\") {\n            uniqueSource.push(i.source);\n        }\n    })\n\n    let uniquePestle = [];\n    serverData.forEach((i) => {\n        if (!uniquePestle.includes(i.pestle) && i.pestle !== \"\") {\n            uniquePestle.push(i.pestle);\n        }\n    })\n\n    const label = [\"Country\", \"Region\", \"Source\", \"Topic\", \"Sector\", \"Pestle\"];\n\n    return (\n        <div style={{ height:'50vh', width: '45vw'}}>\n            <PolarArea\n                data={{\n                    labels: label,\n                    datasets: [\n                        {\n                            label: \"Total: \",\n                            data: [uniqueCountry.length, uniqueRegion.length, uniqueSource.length, uniqueTopics.length, uniqueSectors.length, uniquePestle.length],\n                            borderWidth: 1,\n                        },\n                    ]\n                }}\n                options={{\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            type: 'linear',\n                            beginAtZero: true\n                        },\n                    }\n                }}\n                height={300}\n            />\n        </div>\n    )\n}\n\nexport default PolarChart","C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\charts\\PieChart.jsx",["76"],[],"import React from 'react'\nimport { Pie } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\n\nconst PieChart = ({serverData}) => {\n    let uniquePestle = [];\n\n    serverData.forEach((i) => {\n        if (!uniquePestle.includes(i.pestle) && i.pestle !== \"\") {\n            uniquePestle.push(i.pestle);\n        }\n    })\n\n    const pestleCount = uniquePestle.map((item) => {\n        return {\n            pestle: item,\n            count: serverData.filter((i) => i.pestle === item).length\n        }\n    })\n    \n  return (\n    <div style={{ height:'50vh', width:'45vw'}}>\n            <Pie\n                data={{\n                    labels: uniquePestle,\n                    datasets: [\n                        {\n                            label: \"Projects \",\n                            data: pestleCount.map(i=>i.count),\n                            borderWidth: 1,\n                            hoverOffset: 5,\n                        },\n                    ]\n                }}\n                options={{\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            type: 'linear',\n                            beginAtZero: true\n                        },\n                    }\n                }}\n                height={300}\n            />\n        </div>\n  )\n}\n\nexport default PieChart","C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\charts\\RadarChart.jsx",["77"],[],"import React from 'react'\nimport { Radar } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\n\nconst RadarChart = ({serverData}) => {\n\n    let uniquePestle = [];\n\n    serverData.forEach((i) => {\n        if (!uniquePestle.includes(i.pestle) && i.pestle !== \"\") {\n            uniquePestle.push(i.pestle);\n        }\n    })\n\n    const pestleCount = uniquePestle.map((item) => {\n        return {\n            pestle: item,\n            count: serverData.filter((i) => i.pestle === item).length\n        }\n    })\n\n  return (\n    <div style={{ height:'50vh', width:'45vw'}}>\n            <Radar\n                data={{\n                    labels: uniquePestle,\n                    datasets: [\n                        {\n                            label: \"Projects \",\n                            data: pestleCount.map(i=>i.count),\n                            borderWidth: 1,\n                        },\n                    ]\n                }}\n                options={{\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            type: 'linear',\n                            beginAtZero: true\n                        },\n                    }\n                }}\n                height={300}\n            />\n        </div>\n  )\n}\n\nexport default RadarChart","C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\charts\\DoughnutChart.jsx",["78"],[],"import React from 'react'\nimport { Doughnut } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\n\nconst DoughnutChart = ({serverData}) => {\n\n    let uniqueSectors = [];\n    //using forEach because it doesn't return any array\n    serverData.forEach((i) => {\n        if (!uniqueSectors.includes(i.sector) && i.sector !== \"\") {\n            uniqueSectors.push(i.sector);\n        }\n    })\n\n    let uniqueTopics = [];\n    serverData.forEach((i) => {\n        if (!uniqueTopics.includes(i.topic) && i.topic !== \"\") {\n            uniqueTopics.push(i.topic);\n        }\n    })\n\n    let uniqueRegion = [];\n    serverData.forEach((i) => {\n        if (!uniqueRegion.includes(i.region) && i.region !== \"\") {\n            uniqueRegion.push(i.region);\n        }\n    })\n\n    let uniqueCountry = [];\n    serverData.forEach((i) => {\n        if (!uniqueCountry.includes(i.country) && i.country !== \"\") {\n            uniqueCountry.push(i.country);\n        }\n    })\n\n    let uniqueSource = [];\n    serverData.forEach((i) => {\n        if (!uniqueSource.includes(i.source) && i.source !== \"\") {\n            uniqueSource.push(i.source);\n        }\n    })\n\n    let uniquePestle = [];\n    serverData.forEach((i) => {\n        if (!uniquePestle.includes(i.pestle) && i.pestle !== \"\") {\n            uniquePestle.push(i.pestle);\n        }\n    })\n\n    const label = [\"Country\", \"Region\", \"Source\", \"Topic\", \"Sector\", \"Pestle\"];\n  return (\n    <div style={{ height:'50vh', width: '45vw'}}>\n            <Doughnut\n                data={{\n                    labels: label,\n                    datasets: [\n                        {\n                            label: \"Total: \",\n                            data: [uniqueCountry.length, uniqueRegion.length, uniqueSource.length, uniqueTopics.length, uniqueSectors.length, uniquePestle.length],\n                            borderWidth: 1,\n                            hoverOffset: 5\n                        },\n                        \n                    ]\n                }}\n                options={{\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            type: 'linear',\n                            beginAtZero: true\n                        },\n                    }\n                }}\n                height={300}\n            />\n        </div>\n  )\n}\n\nexport default DoughnutChart","C:\\Users\\Weed\\Downloads\\Data_Visualization_Dashboard-MERN-Stack-main\\Data_Visualization_Dashboard-MERN-Stack-main\\Client\\dashboard\\src\\charts\\LineChart.jsx",["79"],[],"import React from 'react'\nimport { Line } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\n\nconst LineChart = ({serverData}) => {\n\n    let uniquePestle = [];\n    serverData.forEach((i) => {\n        if (!uniquePestle.includes(i.pestle) && i.pestle !== \"\") {\n            uniquePestle.push(i.pestle);\n        }\n    })\n\n    const pestleCount = uniquePestle.map((item) => {\n        return {\n            pestle: item,\n            count: serverData.filter((i) => i.pestle === item).length\n        }\n    })\n\n  return (\n    <div style={{ height:'50vh'}}>\n            <Line\n                data={{\n                    labels: uniquePestle,\n                    datasets: [\n                        {\n                            label: \"Projects \",\n                            data: pestleCount.map(i=>i.count),\n                            borderWidth: 1,\n                        },\n                    ]\n                }}\n                options={{\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            type: 'linear',\n                            beginAtZero: true\n                        },\n                    }\n                }}\n                height={300}\n            />\n        </div>\n  )\n}\n\nexport default LineChart",{"ruleId":"80","severity":1,"message":"81","line":3,"column":8,"nodeType":"82","messageId":"83","endLine":3,"endColumn":13},{"ruleId":"80","severity":1,"message":"84","line":1,"column":17,"nodeType":"82","messageId":"83","endLine":1,"endColumn":26},{"ruleId":"80","severity":1,"message":"81","line":3,"column":8,"nodeType":"82","messageId":"83","endLine":3,"endColumn":13},{"ruleId":"80","severity":1,"message":"81","line":3,"column":8,"nodeType":"82","messageId":"83","endLine":3,"endColumn":13},{"ruleId":"80","severity":1,"message":"81","line":3,"column":8,"nodeType":"82","messageId":"83","endLine":3,"endColumn":13},{"ruleId":"80","severity":1,"message":"81","line":3,"column":8,"nodeType":"82","messageId":"83","endLine":3,"endColumn":13},{"ruleId":"80","severity":1,"message":"81","line":3,"column":8,"nodeType":"82","messageId":"83","endLine":3,"endColumn":13},"no-unused-vars","'Chart' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used."]