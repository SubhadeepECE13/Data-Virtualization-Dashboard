{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Weed/Downloads/Data_Visualization_Dashboard-MERN-Stack-main/Data_Visualization_Dashboard-MERN-Stack-main/Client/dashboard/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/Weed/Downloads/Data_Visualization_Dashboard-MERN-Stack-main/Data_Visualization_Dashboard-MERN-Stack-main/Client/dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Users/Weed/Downloads/Data_Visualization_Dashboard-MERN-Stack-main/Data_Visualization_Dashboard-MERN-Stack-main/Client/dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from'react';import axios from'axios';import'./App.css';//import from files\nimport Header from'./components/Header';import Tabsrow from'./components/Tabsrow';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){//state to save data received from the server\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),mainData=_useState2[0],setMainData=_useState2[1];//asynchronous function to fetch data from server and updating the state\nvar getDataFromDB=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return axios.get(\"http://localhost:5000/\");case 3:response=_context.sent;setMainData(response.data.data);_context.next=10;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);console.log(_context.t0);case 10:case\"end\":return _context.stop();}},_callee,null,[[0,7]]);}));return function getDataFromDB(){return _ref.apply(this,arguments);};}();//calling the above function on first render\nuseEffect(function(){getDataFromDB();},[]);//where a state is updated, we will print the length of data received just for the test purposes\nuseEffect(function(){console.log(mainData.length);},[mainData]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsx(Tabsrow,{data:mainData,setMainData:setMainData})]});}export default App;","map":{"version":3,"names":["React","useEffect","useState","axios","Header","Tabsrow","jsx","_jsx","jsxs","_jsxs","App","_useState","_useState2","_slicedToArray","mainData","setMainData","getDataFromDB","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","get","sent","data","t0","console","log","stop","apply","arguments","length","children"],"sources":["C:/Users/Weed/Downloads/Data_Visualization_Dashboard-MERN-Stack-main/Data_Visualization_Dashboard-MERN-Stack-main/Client/dashboard/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\n//import from files\nimport Header from './components/Header';\nimport Tabsrow from './components/Tabsrow';\n\n\nfunction App() {\n    //state to save data received from the server\n    const [mainData, setMainData] = useState([]);    \n    //asynchronous function to fetch data from server and updating the state\n    const getDataFromDB = async() => {\n        try{\n            const response = await axios.get(\"http://localhost:5000/\");\n            setMainData(response.data.data)\n        }\n        catch(e){\n            console.log(e)\n        }\n    }\n    //calling the above function on first render\n    useEffect(()=>{\n        getDataFromDB();\n    },[])\n    //where a state is updated, we will print the length of data received just for the test purposes\n    useEffect(()=>{\n      console.log(mainData.length)\n    },[mainData])\n\n  return (\n    <div>\n      <Header/>\n      <Tabsrow data={mainData} setMainData={setMainData} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"wpBAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,CAAAC,KAAK,KAAM,OAAO,CACzB,MAAO,WAAW,CAElB;AACA,MAAO,CAAAC,MAAM,KAAM,qBAAqB,CACxC,MAAO,CAAAC,OAAO,KAAM,sBAAsB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAG3C,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACX;AACA,IAAAC,SAAA,CAAgCT,QAAQ,CAAC,EAAE,CAAC,CAAAU,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAArCG,QAAQ,CAAAF,UAAA,IAAEG,WAAW,CAAAH,UAAA,IAC5B;AACA,GAAM,CAAAI,aAAa,6BAAAC,IAAA,CAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAA,MAAAC,QAAA,QAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA,iBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SAAAF,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA,SAES,CAAAxB,KAAK,CAACyB,GAAG,CAAC,wBAAwB,CAAC,QAApDN,QAAQ,CAAAG,QAAA,CAAAI,IAAA,CACdd,WAAW,CAACO,QAAQ,CAACQ,IAAI,CAACA,IAAI,CAAC,CAAAL,QAAA,CAAAE,IAAA,iBAAAF,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAM,EAAA,CAAAN,QAAA,aAG/BO,OAAO,CAACC,GAAG,CAAAR,QAAA,CAAAM,EAAE,CAAC,0BAAAN,QAAA,CAAAS,IAAA,MAAAb,OAAA,gBAErB,kBARK,CAAAL,aAAaA,CAAA,SAAAC,IAAA,CAAAkB,KAAA,MAAAC,SAAA,OAQlB,CACD;AACAnC,SAAS,CAAC,UAAI,CACVe,aAAa,CAAC,CAAC,CACnB,CAAC,CAAC,EAAE,CAAC,CACL;AACAf,SAAS,CAAC,UAAI,CACZ+B,OAAO,CAACC,GAAG,CAACnB,QAAQ,CAACuB,MAAM,CAAC,CAC9B,CAAC,CAAC,CAACvB,QAAQ,CAAC,CAAC,CAEf,mBACEL,KAAA,QAAA6B,QAAA,eACE/B,IAAA,CAACH,MAAM,GAAC,CAAC,cACTG,IAAA,CAACF,OAAO,EAACyB,IAAI,CAAEhB,QAAS,CAACC,WAAW,CAAEA,WAAY,CAAE,CAAC,EAClD,CAAC,CAEV,CAEA,cAAe,CAAAL,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}